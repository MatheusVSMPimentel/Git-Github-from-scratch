version: "3.8"

tasks:
  git-reset-head-to-last-index:
    cmds:
      - git reset HEAD~
  add-hook-to-git-repo:
    cmds:
      - 'powershell -Command "cd .git/hooks; New-Item -Path . -Name \"prepare-commit-msg\" -ItemType \"file\" "'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''#!/bin/bash''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''# Get the commit message from the argument''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''MSG=\$1''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''# Read the commit message from the file''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''# MSG=$(cat "$MSG_FILE")''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''# Check if the commit message ends with the desired pattern''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''if ! grep -qE \"by [a-zA-Z0-9_]+\$\" $MSG; then''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''  echo \"Your message should ends with \" by [commit_author_name]\" \"''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''  exit 1''"'
      - 'powershell -Command "cd .git/hooks; Add-Content -Path \"prepare-commit-msg\" -Value ''fi''"'
  git-add-files-to-git-index:
    cmds:
      - git add *
  git-push:
    cmds:
      - git push
  git-commit-without-rule:
    cmds:
      - git commit -m "any commit message goes here"
  git-commit-following-rule:
    cmds:
      - 'git commit -m ''feature: creating hook blocking commits without author name by Matheus Pimentel'''
  git-commit-tags:
    cmds:
      - 'git commit -m ''chore: create tags commands by Matheus Pimentel'''
  git-commit-submodule:
    cmds:
      - 'git commit -m ''feature: working with submodules by Matheus Pimentel'''
  git-tag-v1:
    cmds:
      - 'git tag v1.0.0'
  git-tag-v1-1:
    cmds:
      - 'git tag v1.1.0'
  git-tag-list:
    cmds:
      - 'git tag -l'
  git-status:
    cmds: 
      - 'git status'
  git-checkout-v1:
    cmds:
      - 'git checkout v1.0.0'
  git-add-submodule:
    cmds:
      - 'git submodule add https://github.com/AutoMapper/AutoMapper.git'
  verify-branch-module-and-submodule:
    cmds:
      - 'powershell -Command "git branch ; cd AutoMapper; git branch "'
  browser-to-submodule-verify-branch:
    cmds:
      - 'powershell -Command " cd AutoMapper; git branch "'
  automapper-submodule-pull:
    cmds:
      - 'powershell -Command "cd AutoMapper; git pull "'
  switch-submodule-branch:
    cmds:
      - 'powershell -Command "cd AutoMapper; git switch master "'
  submodule-update-all:
    cmds:
      - 'powershell -Command "git submodule update "'
  submodule-init:
    cmds:
      - 'powershell -Command "git submodule init "'
  submodule-update-init:
    cmds:
      - 'powershell -Command "git submodule update --init --recursive "'
  git-clone-with-submodule:
    cmds:
      - 'powershell -Command "git clone https://github.com/MatheusVSMPimentel/Git-Github-from-scratch.git --recurse-submodules "'
  git-clone-without-submodule:
    cmds:
      - 'powershell -Command "git clone https://github.com/MatheusVSMPimentel/Git-Github-from-scratch.git "'
  install-git-lfs:
    cmds:
      - 'powershell -Command "winget search lfs ; winget install GitHub.GitLFS"'
  git-lfs:
    cmds:
      - 'powershell -Command "git lfs"'
  git-lfs-install:
    cmds:
      - 'powershell -Command "git lfs install"'
  git-lfs-track-mov:
    cmds:
      - 'powershell -Command "git lfs track \"*.mov\" "'
      - 'powershell -Command "git lfs install"'
  git-commit-lfs:
    cmds:
      - 'powershell -Command "git commit -m ''feature: working with lfs by Matheus Pimentel''"'
  git-reset-commit:
    cmds:
      - 'powershell -Command "git reset Head~1 --soft"'
  git-commit-bundling:
    cmds:
      - 'powershell -Command "git commit -m ''feature: working with bundling by Matheus Pimentel''"'
  git-bundle:
    cmds:
      - 'powershell -Command "git bundle create MyProject.bundle HEAD main"'
  browser-copy-and-clone-bundle:
    cmds:
      - 'powershell -Command " 
        cd ../../teste-repos; 
        copy ../repos/Git-Github-from-scratch/MyProject.bundle .; 
        git clone MyProject.bundle "'
  browser-to-bundle-clone-verify-branch:
    cmds:
      - 'powershell -Command " 
        cd ../../teste-repos/MyProject; 
        git branch; git log "'
  git-rebase-interactive:
    cmds:
      - 'powershell -Command " 
        git rebase -i HEAD~10 "'
  git-log-simplified:
    cmds:
      - 'powershell -Command " 
        git log --oneline "'
  git-log-search:
    cmds:
      - 'powershell -Command " 
        git log -S lfs "'
  git-log-search-diff:
    cmds:
      - 'powershell -Command " 
        git log --diff-filter=D --summary"'
  git-log-search-files:
    cmds:
      - 'powershell -Command " 
        git log --all --full-history -- \"*index*\" "'
  git-grep:
    cmds:
      - 'powershell -Command " 
        git grep ! "'
  git-grep-count:
    cmds:
      - 'powershell -Command " 
        git grep --count ! "'
  git-bisect-start:
    cmds:
        #answer the questions after command
      - 'powershell -Command " 
        git bisect start "'
  git-bisect-reset:
    cmds:
      - 'powershell -Command " 
        git bisect reset "'
  git-bisect-with-command:
    cmds:
      - 'powershell -Command " 
        git bisect start HEAD {{lastGoodVersionTag}}  ; git bisect run {{someCommand}}"'
  